/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findResolverV1Pda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";

// Accounts.
export type ResolveP2pV1InstructionAccounts = {
  /** Resolver */
  resolver?: PublicKey | Pda;
  /** Market */
  market: PublicKey | Pda;
  /** Oracle request */
  request: PublicKey | Pda;
  /** HPL P2P program */
  p2pProgram?: PublicKey | Pda;
};

// Data.
export type ResolveP2pV1InstructionData = { discriminator: number };

export type ResolveP2pV1InstructionDataArgs = {};

export function getResolveP2pV1InstructionDataSerializer(): Serializer<
  ResolveP2pV1InstructionDataArgs,
  ResolveP2pV1InstructionData
> {
  return mapSerializer<ResolveP2pV1InstructionDataArgs, any, ResolveP2pV1InstructionData>(
    struct<ResolveP2pV1InstructionData>([["discriminator", u8()]], {
      description: "ResolveP2pV1InstructionData",
    }),
    (value) => ({ ...value, discriminator: 1 }),
  );
}

// Instruction.
export function resolveP2pV1(
  context: Pick<Context, "eddsa" | "programs">,
  input: ResolveP2pV1InstructionAccounts,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "oracleResolver",
    "RESwds5X9Yj1kzXkjuA5ncR8TqhHeqj7qcrUz9QM29f",
  );

  // Accounts.
  const resolvedAccounts = {
    resolver: {
      index: 0,
      isWritable: false as boolean,
      value: input.resolver ?? null,
    },
    market: {
      index: 1,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    request: {
      index: 2,
      isWritable: false as boolean,
      value: input.request ?? null,
    },
    p2pProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.p2pProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.resolver.value) {
    resolvedAccounts.resolver.value = findResolverV1Pda(context, {
      market: expectPublicKey(resolvedAccounts.market.value),
      request: expectPublicKey(resolvedAccounts.request.value),
    });
  }
  if (!resolvedAccounts.p2pProgram.value) {
    resolvedAccounts.p2pProgram.value = context.programs.getPublicKey(
      "hplP2p",
      "P2PototC41acvjMc9cvAoRjFjtaRD5Keo9PvNJfRwf3",
    );
    resolvedAccounts.p2pProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getResolveP2pV1InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
