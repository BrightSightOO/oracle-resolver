/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { AccountTypeArgs, MarketProgram, MarketProgramArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer, getMarketProgramSerializer } from "../types";

export type ResolverV1 = Account<ResolverV1AccountData>;

export type ResolverV1AccountData = {
  accountType: AccountType;
  market: PublicKey;
  request: PublicKey;
  program: MarketProgram;
};

export type ResolverV1AccountDataArgs = {
  market: PublicKey;
  request: PublicKey;
  program: MarketProgramArgs;
};

export function getResolverV1AccountDataSerializer(): Serializer<
  ResolverV1AccountDataArgs,
  ResolverV1AccountData
> {
  return mapSerializer<ResolverV1AccountDataArgs, any, ResolverV1AccountData>(
    struct<ResolverV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["market", publicKeySerializer()],
        ["request", publicKeySerializer()],
        ["program", getMarketProgramSerializer()],
      ],
      { description: "ResolverV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.ResolverV1 }),
  );
}

export function deserializeResolverV1(rawAccount: RpcAccount): ResolverV1 {
  return deserializeAccount(rawAccount, getResolverV1AccountDataSerializer());
}

export async function fetchResolverV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<ResolverV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "ResolverV1");
  return deserializeResolverV1(maybeAccount);
}

export async function safeFetchResolverV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<ResolverV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeResolverV1(maybeAccount) : null;
}

export async function fetchAllResolverV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<ResolverV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "ResolverV1");
    return deserializeResolverV1(maybeAccount);
  });
}

export async function safeFetchAllResolverV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<ResolverV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeResolverV1(maybeAccount as RpcAccount));
}

export function getResolverV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "oracleResolver",
    "RESwds5X9Yj1kzXkjuA5ncR8TqhHeqj7qcrUz9QM29f",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      market: PublicKey;
      request: PublicKey;
      program: MarketProgramArgs;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      market: [1, publicKeySerializer()],
      request: [33, publicKeySerializer()],
      program: [65, getMarketProgramSerializer()],
    })
    .deserializeUsing<ResolverV1>((account) => deserializeResolverV1(account))
    .whereField("accountType", AccountType.ResolverV1);
}

export function getResolverV1Size(): number {
  return 66;
}

export function findResolverV1Pda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the market to resolve */
    market: PublicKey;
    /** The address of the oracle request used to source outcome */
    request: PublicKey;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "oracleResolver",
    "RESwds5X9Yj1kzXkjuA5ncR8TqhHeqj7qcrUz9QM29f",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("resolver"),
    publicKeySerializer().serialize(seeds.market),
    publicKeySerializer().serialize(seeds.request),
  ]);
}

export async function fetchResolverV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findResolverV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<ResolverV1> {
  return fetchResolverV1(context, findResolverV1Pda(context, seeds), options);
}

export async function safeFetchResolverV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findResolverV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<ResolverV1 | null> {
  return safeFetchResolverV1(context, findResolverV1Pda(context, seeds), options);
}
